{"version":3,"sources":["logo.svg","component/context.js","component/Contact/Contact.js","component/Contact/Contacts.js","component/layout/Header.js","component/layout/TextInputGroup.js","component/Contact/AddContact.js","component/pages/About.js","component/pages/NotFoundPage.js","component/Contact/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","Reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDelete","a","delete","name","email","phone","className","onClick","style","cursor","color","float","bind","to","marginRight","Contacts","deleteContact","newContact","Fragment","key","deleteClickHandler","Header","branding","href","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","prototype","PropTypes","string","isRequired","func","defaultProps","AddContact","errors","target","onSubmit","preventDefault","post","history","push","About","NotFoundPage","EditContact","updContact","match","params","put","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bf320290.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst Context = React.createContext();\r\n\r\nconst Reducer = (state,action)=>{\r\n    switch(action.type){\r\n        case 'DELETE_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => \r\n                    contact.id !== action.payload)\r\n            }\r\n\r\n        case 'ADD_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts: [action.payload,\r\n                ...state.contacts]\r\n            }\r\n\r\n        case 'UPDATE_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts: state.contacts.map(contact => \r\n                    contact.id === action.payload.id? (contact =\r\n                        action.payload) : contact)\r\n            }    \r\n\r\n        default: \r\n            return state;    \r\n    }\r\n}\r\n\r\nexport class Provider extends Component{\r\n    state = {\r\n        contacts : [],\r\n        dispatch: action =>{\r\n            this.setState(state => Reducer(state,action) )\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const res = await axios.get('http://jsonplaceholder.typicode.com/users')\r\n\r\n        this.setState({contacts: res.data});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { Consumer } from '../context'\r\nimport axios from 'axios'\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    }\r\n    onShowClick= e =>{\r\n      this.setState({showContactInfo: !this.state.showContactInfo});  \r\n    };\r\n\r\n    onDelete = async (id,dispatch) =>{\r\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n            dispatch({type:'DELETE_CONTACT',payload: id});\r\n    };\r\n\r\n    render() {\r\n        const { id,name,email,phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n        return(\r\n            <Consumer>\r\n                {value =>{\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                            {name}\r\n                            \r\n                            <i onClick={this.onShowClick} \r\n                            className=\"fa fa-chevron-down\"\r\n                            style={{cursor:'pointer'}}/>\r\n                            \r\n                            <i \r\n                                className=\"fa fa-times\"\r\n                                style={{cursor:'pointer',color:\"red\",float:'right'}}\r\n                                onClick={this.onDelete.bind(this,id,dispatch)}\r\n                            />\r\n\r\n                            <Link to={`contact/edit/${id}`}>\r\n                                <i\r\n                                 className=\"fa fa-pencil\"\r\n                                 style={{\r\n                                     cursor: 'pointer',\r\n                                     float: 'right',\r\n                                     color: 'black',\r\n                                     marginRight: '1em'  \r\n                                 }}\r\n                                ></i>\r\n                                </Link>\r\n\r\n                            </h4>\r\n\r\n                            {showContactInfo ? (<ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                                <li className=\"list-group-item\">Phone: {phone}</li>\r\n                            </ul>): null}\r\n                            \r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes ={\r\n    contact: PropTypes.object.isRequired,\r\n    deleteClickHandler: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { Consumer } from '../context'\r\n\r\nclass Contacts extends Component {\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    deleteContact = (id) =>{\r\n        const { contacts } = this.state;\r\n        const newContact = contacts.filter(contact =>\r\n            contact.id !== id\r\n        );\r\n\r\n        this.setState({\r\n            contacts: newContact\r\n        })\r\n\r\n    };\r\n    \r\n    render() {\r\n            return(\r\n                <Consumer>\r\n                    {value =>{\r\n                        const { contacts } = value;\r\n                        return(\r\n                            <React.Fragment>\r\n                                <h1 className=\"display-4 mb-2\">\r\n                                    <span className=\"text-danger\">Contact </span>List\r\n                                </h1>\r\n                                {contacts.map(contact => \r\n                                <Contact \r\n                                    key={contact.id}\r\n                                    contact={contact} \r\n                                    deleteClickHandler={this.deleteContact.bind(this,contact.id)}\r\n                                />\r\n                                )}\r\n                            </React.Fragment>\r\n                        )\r\n                    }}    \r\n                </Consumer>\r\n            )\r\n        }\r\n}\r\n\r\nexport default Contacts;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = (props) =>{\r\n    const { branding } = props;\r\n    return(\r\n        <nav className=\"navbar navbar-expand-sm \r\n        navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                    <a href=\"/\" className=\"navbar-brand\">\r\n                        {branding}\r\n                        </a>\r\n                </div>\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                    <Link to=\"/\" className=\"nav-link\">\r\n                        <i className=\"fa fa-home\"/>Home\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    <Link to=\"/contact/add\" className=\"nav-link\">\r\n                    <i className=\"fa fa-plus\"/>Add\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    <Link to=\"/about\" className=\"nav-link\">\r\n                    <i className=\"fa fa-question\"/>About\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n    );\r\n}\r\n\r\nHeader.propTypes={\r\n    branding: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n\r\nconst TextInputGroup=({\r\n    label,\r\n    name,\r\n    placeholder,\r\n    type,\r\n    value,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n    <div className=\"form-group\">\r\n        <label htmlFor={name}>{label}</label>\r\n        <input type={type}\r\n        name={name}\r\n        className={classnames('form-control form-control-lg',{\r\n            'is-invalid':error\r\n        })}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        />\r\n        {error && <div className=\"invalid-feedback\">\r\n            {error}\r\n        </div>}\r\n        \r\n    </div>\r\n    \r\n    );\r\n    \r\n};\r\n\r\nTextInputGroup.prototype={\r\n    label:PropTypes.string.isRequired,\r\n    name:PropTypes.string.isRequired,\r\n    placeholder:PropTypes.string.isRequired,\r\n    type:PropTypes.string.isRequired,\r\n    onChange:PropTypes.func.isRequired,\r\n    error:PropTypes.string.isRequired\r\n}\r\n\r\nTextInputGroup.defaultProps={\r\n    type:'text'\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react'\r\nimport { Consumer } from '../context'\r\nimport axios from 'axios'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n\r\nclass AddContact extends Component {\r\n    state={\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    onChange = e =>{\r\n        this.setState({ [e.target.name]:e.target.value });\r\n    }\r\n\r\n    onSubmit = async (dispatch,e) =>{\r\n        e.preventDefault();\r\n        const { name,email,phone } = this.state;\r\n\r\n        // Check for Errors\r\n\r\n        if(name === ''){\r\n            this.setState({errors: { name : 'name is required'}})\r\n            return;\r\n        }\r\n\r\n        if(email === ''){\r\n            this.setState({errors: { email : 'email is required'}})\r\n            return;\r\n        }\r\n\r\n        if(phone === ''){\r\n            this.setState({errors: { phone : 'phone is required'}})\r\n            return;\r\n        }\r\n\r\n        const newContact={\r\n            name,\r\n            email,\r\n            phone,\r\n        };\r\n\r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users',newContact)\r\n            dispatch({type:'ADD_CONTACT',payload:res.data});\r\n\r\n        //Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n\r\n    }\r\n\r\n    render() {\r\n        const {name,email,phone,errors} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value =>{\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card mb-3\">\r\n                <div className=\"card-header\">\r\n                    Add Contact\r\n                </div>\r\n                    <div className=\"card-body\">\r\n                        <form onSubmit={this.onSubmit.bind(this,dispatch)}>\r\n                            <TextInputGroup\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter Name\"\r\n                                type=\"text\"\r\n                                value={name}\r\n                                onChange={this.onChange}\r\n                                error={errors.name}\r\n                            />\r\n\r\n                            <TextInputGroup\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                placeholder=\"Enter Email\"\r\n                                type=\"email\"\r\n                                value={email}\r\n                                onChange={this.onChange}\r\n                                error={errors.email}\r\n                            />\r\n\r\n                            <TextInputGroup\r\n                                label=\"Phone\"\r\n                                name=\"phone\"\r\n                                placeholder=\"Enter Phone Number\"\r\n                                type=\"text\"\r\n                                value={phone}\r\n                                onChange={this.onChange}\r\n                                error={errors.phone}\r\n                            />\r\n                            <input className=\"btn btn-light btn-block\" type=\"submit\" value=\"Add contact\"/>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                    )\r\n                        }}\r\n            </Consumer>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NotFoundPage() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page does not exists</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Consumer } from '../context'\r\nimport axios from 'axios'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n\r\nclass EditContact extends Component {\r\n    state={\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        })\r\n    }\r\n\r\n    onChange = e =>{\r\n        this.setState({ [e.target.name]:e.target.value });\r\n    }\r\n\r\n    onSubmit = async (dispatch,e) =>{\r\n        e.preventDefault();\r\n        const { name,email,phone } = this.state;\r\n\r\n        // Check for Errors\r\n\r\n        if(name === ''){\r\n            this.setState({errors: { name : 'name is required'}})\r\n            return;\r\n        }\r\n\r\n        if(email === ''){\r\n            this.setState({errors: { email : 'email is required'}})\r\n            return;\r\n        }\r\n\r\n        if(phone === ''){\r\n            this.setState({errors: { phone : 'phone is required'}})\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`,updContact);\r\n\r\n        dispatch({type:'UPDATE_CONTACT',payload:res.data});\r\n\r\n        //Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n\r\n    }\r\n\r\n    render() {\r\n        const {name,email,phone,errors} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value =>{\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card mb-3\">\r\n                <div className=\"card-header\">\r\n                    Edit Contact\r\n                </div>\r\n                    <div className=\"card-body\">\r\n                        <form onSubmit={this.onSubmit.bind(this,dispatch)}>\r\n                            <TextInputGroup\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter Name\"\r\n                                type=\"text\"\r\n                                value={name}\r\n                                onChange={this.onChange}\r\n                                error={errors.name}\r\n                            />\r\n\r\n                            <TextInputGroup\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                placeholder=\"Enter Email\"\r\n                                type=\"email\"\r\n                                value={email}\r\n                                onChange={this.onChange}\r\n                                error={errors.email}\r\n                            />\r\n\r\n                            <TextInputGroup\r\n                                label=\"Phone\"\r\n                                name=\"phone\"\r\n                                placeholder=\"Enter Phone Number\"\r\n                                type=\"text\"\r\n                                value={phone}\r\n                                onChange={this.onChange}\r\n                                error={errors.phone}\r\n                            />\r\n                            <input className=\"btn btn-light btn-block\" type=\"submit\" value=\"Update contact\"/>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                    )\r\n                        }}\r\n            </Consumer>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React from 'react';\nimport logo from './logo.svg';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './component/Contact/Contacts';\nimport Header from './component/layout/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AddContact from './component/Contact/AddContact';\nimport { Provider } from './component/context';\nimport './App.css';\nimport About from './component/pages/About'\nimport NotFoundPage from './component/pages/NotFoundPage';\nimport EditContact from './component/Contact/EditContact';\n\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n    <div className=\"App\">\n      <Header branding=\"Contact Manager\"/>\n      <div className=\"container\">\n        <Switch>\n        <Route exact path=\"/\" component={Contacts}/>\n          <Route exact path=\"/contact/add\" component={AddContact}/>\n          <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\n          <Route exact path=\"/about\" component={About}/>\n          <Route component={NotFoundPage}/>\n        </Switch>\n        </div>\n      \n    </div>\n    </Router>\n    </Provider>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}